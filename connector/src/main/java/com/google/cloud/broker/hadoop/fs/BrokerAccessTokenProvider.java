// Copyright 2019 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.cloud.broker.hadoop.fs;

import java.io.IOException;
import java.security.PrivilegedAction;

import org.ietf.jgss.GSSException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.security.UserGroupInformation;

import com.google.cloud.hadoop.util.AccessTokenProvider;

// Classes dynamically generated by protobuf-maven-plugin:
import com.google.cloud.broker.protobuf.GetAccessTokenRequest;
import com.google.cloud.broker.protobuf.GetAccessTokenResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public final class BrokerAccessTokenProvider implements AccessTokenProvider {
    private static final Logger logger = LoggerFactory.getLogger(BrokerAccessTokenProvider.class);
    private Configuration config;
    private AccessToken accessToken;
    private BrokerTokenIdentifier tokenIdentifier;
    private Text service;

    private final static AccessToken EXPIRED_TOKEN = new AccessToken("", -1L);

    public BrokerAccessTokenProvider(Text service) {
        this.service = service;
        this.accessToken = EXPIRED_TOKEN;
    }

    public BrokerAccessTokenProvider(Text service, BrokerTokenIdentifier bti) {
        this.service = service;
        this.tokenIdentifier = bti;
        this.accessToken = EXPIRED_TOKEN;
    }

    @Override
    public AccessToken getAccessToken() {
        logger.debug("getting access token");
        return this.accessToken;
    }

    @Override
    public void refresh() {
        UserGroupInformation currentUser;
        UserGroupInformation loginUser;
        try {
            currentUser = UserGroupInformation.getCurrentUser();
            loginUser = UserGroupInformation.getLoginUser();
        } catch (IOException e) {
            throw new RuntimeException("failed to get UGI", e);
        }

        String sessionToken;

        if (tokenIdentifier != null) {
            sessionToken = tokenIdentifier.getSessionToken();
            logger.debug("found session token for " + loginUser.getUserName());
        }
        else {
            sessionToken = null;
        }

        GetAccessTokenResponse response = loginUser.doAs((PrivilegedAction<GetAccessTokenResponse>) () -> {
            BrokerGateway gateway;
            // TODO remove these debug logs
            if (loginUser.hasKerberosCredentials()) {
                logger.debug("loginUser has Kerberos Credentials");
            } else {
                logger.debug("loginUser DOES NOT have Kerberos Credentials");
            }
            try {
                loginUser.checkTGTAndReloginFromKeytab();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            // TODO remove
            try {
                logger.debug("Initializing BrokerGateway for " + loginUser.getUserName());
                gateway = new BrokerGateway(config, loginUser, sessionToken);
            } catch (GSSException e) {
                // Kerberos authentication failed
                throw new RuntimeException("failed to initialize BrokerGateway for " + loginUser.getUserName(), e);
            }

            GetAccessTokenRequest request = GetAccessTokenRequest.newBuilder()
                .setScope(BrokerTokenIdentifier.BROKER_SCOPE)
                .setOwner(currentUser.getUserName())
                .setTarget(service.toString())
                .build();

            logger.debug("Submitting GetAccessTokenRequest for " + currentUser.getUserName());
            GetAccessTokenResponse r = gateway.getStub().getAccessToken(request);
            if (r != null) {
                logger.debug("Received GetAccessTokenResponse with access token=" + r.getAccessToken().substring(0,5) + "... expiration=" + r.getExpiresAt());
            } else {
                logger.error("Received null GetAccessTokenResponse");
            }
            gateway.getManagedChannel().shutdown();
            return r;
        });

        if (response != null) {
            String tokenString = response.getAccessToken();
            long expiresAt = response.getExpiresAt();
            accessToken = new AccessToken(tokenString, expiresAt);
        }
        else {
            throw new RuntimeException("User is not logged-in with Kerberos or cannot authenticate with the broker.");
        }
    }

    @Override
    public void setConf(Configuration config) {
        this.config = config;
    }

    @Override
    public Configuration getConf() {
        return this.config;
    }

}